# cache-buster: pass git hash so stub layer always rebuilds
ARG STUB_HASH
# ---------------------------------------------------------------------------
# Tangent ‚áÑ Codex end-to-end runner ‚Äî based on Playwright v1.52 "jammy" image
# (works on Apple-Silicon when you build / run with  --platform linux/amd64)
# ---------------------------------------------------------------------------

    FROM mcr.microsoft.com/playwright:v1.52.0-jammy

    # Use bash for every subsequent RUN instruction (gives us arrays, brace
    # expansion, && piping behaviour identical across layers).
    SHELL ["/bin/bash", "-c"]

    ################################################################################
    # 0 ¬∑ Base tweaks ‚Äî Node 22 ‚Üí 20, system libs, Corepack, PATH
    ################################################################################
    USER root

    # downgrade to Node 20 (guaranteed working with electron@35)
    RUN set -euo pipefail &&\
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &&\
        apt-get update -qq &&\
        DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades\
            nodejs\
            # Basic X11 libraries
            libx11-6 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libxfixes3\
            libxext6 libxi6 libxtst6 libxcursor1\
            # GPU and rendering
            libdrm2 libgbm1 libegl1 libgl1\
            # Audio
            libasound2 libpulse0 libsndio7.0\
            # Security and encryption
            libnss3 libnspr4\
            # GTK and desktop integration
            libgtk-3-0 libcups2 libxcb-shm0 libatk1.0-0 libatk-bridge2.0-0\
            # Display server
            xvfb dbus-x11\
            # Additional dependencies for Electron
            libgconf-2-4 libnotify4 libxtst6 xauth xvfb &&\
        rm -rf /var/lib/apt/lists/* &&\
        corepack enable &&\
        echo "Comprehensive Electron dependencies installed successfully"

    # add Playwright's node-modules to PATH so `playwright` is always available
    ENV PATH=/ms-playwright/node_modules/.bin:$PATH
    ENV CI=true PLAYWRIGHT_IN_DOCKER=1 DISPLAY=:99\
        XDG_RUNTIME_DIR=/tmp/runtime-dir DBUS_SESSION_BUS_ADDRESS=/dev/null

    ################################################################################
    # 1 ¬∑ Copy repo & install **all** work-space deps (dev + prod)
    ################################################################################
    USER pwuser
    WORKDIR /repo
    COPY --chown=pwuser:pwuser . .
    # Ensure the throw-away workspace path exists for integration tests
    RUN mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace

    # Configure pnpm for optimal reliability and install deps in two separate steps
    RUN echo "allowed-scripts=electron" >> .npmrc &&\
        echo "Setting up .npmrc for better reliability..." &&\
        echo "fetch-timeout=300000" >> .npmrc &&\
        echo "fetch-retries=5" >> .npmrc &&\
        echo "network-timeout=300000" >> .npmrc &&\
        echo "strict-peer-dependencies=false" >> .npmrc &&\
        echo "auto-install-peers=true" >> .npmrc

    ARG APP_FILTER="tangent_electron"
    ################################################################
    # 2 ¬∑ Two-phase installation: core dependencies first, then Electron
    ################################################################
    # Step 1: Install core dependencies and explicitly verify if Electron is installed
    RUN echo "üöÄ Installing core dependencies with explicit Electron checks..." &&\
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 pnpm install -w --prod=false --frozen-lockfile --prefer-offline --ignore-scripts=false &&\
        echo "‚úÖ Core dependencies installed successfully" &&\
        echo "==== Verifying Electron after MAIN pnpm install ====" &&\
        EXPECTED_PNPM_ELECTRON_PATH="/repo/node_modules/electron/dist/electron" &&\
        echo "Expected path after pnpm install: ${EXPECTED_PNPM_ELECTRON_PATH}" &&\
        if [ -f "${EXPECTED_PNPM_ELECTRON_PATH}" ]; then \
          ls -la "${EXPECTED_PNPM_ELECTRON_PATH}" &&\
          chmod +x "${EXPECTED_PNPM_ELECTRON_PATH}" &&\
          echo "Running ${EXPECTED_PNPM_ELECTRON_PATH} --version:" &&\
          "${EXPECTED_PNPM_ELECTRON_PATH}" --version --no-sandbox || echo "Version check failed (expected in headless env)" &&\
          echo "‚úÖ Electron binary found after main pnpm install."; \
        else \
          echo "‚ö†Ô∏è WARNING: Electron binary NOT FOUND at ${EXPECTED_PNPM_ELECTRON_PATH} after main pnpm install." &&\
          echo "Listing /repo/node_modules/ to find electron directory:" &&\
          ls -la /repo/node_modules/ | grep electron || true &&\
          echo "Listing pnpm store to find electron:" &&\
          find "$(pnpm store path)" -name "electron" -type d | head -n 5 || true &&\
          echo "Will attempt targeted install in next steps."; \
        fi &&\
        echo "==== Electron Verification after main pnpm install Complete ===="

    # Step 2: Install Electron with comprehensive validation and dependency checks
    # Switch to root temporarily for ensuring we have necessary dependencies
    USER root
    RUN apt-get update &&\
        apt-get install -y sudo file libc-bin strace libgbm1 libasound2 libgtk-3-0 libnss3 &&\
        echo "‚úÖ System dependencies for Electron installed"

    # Switch back to pwuser for Electron installation and validation
    USER pwuser

    # Use a heredoc for the entire Electron installation and validation script
    # This avoids all the line continuation and shell script syntax issues with Docker
    RUN bash -euxo pipefail <<'EOS'
      echo "üöÄ Installing Electron via pnpm (devDependency)..."
      cd /repo/Tangent-main/apps/tangent-electron
      pnpm install -D electron@35.2.1 --ignore-scripts=false

      echo "==== COMPREHENSIVE ELECTRON VALIDATION ===="
      EXPECTED="/repo/node_modules/electron/dist/electron"
      echo "Expected Electron path: $EXPECTED"

      if [[ ! -f "$EXPECTED" ]]; then
        echo "‚ö†Ô∏è Electron not found, trying multiple fallback methods..."

        # Try fallback 1: targeted pnpm add at workspace root
        echo "üîç Fallback 1: Using pnpm add at workspace root..."
        cd /repo
        rm -rf node_modules/electron node_modules/.bin/electron 2>/dev/null || true
        pnpm add -D electron@35.2.1 --workspace-root --ignore-scripts=false

        # Check if that worked
        if [[ -f "$EXPECTED" ]]; then
          echo "‚úÖ Fallback 1 successful: Electron installed via pnpm add at workspace root"
        else
          # Try fallback 2: direct pnpm add in main electron directory
          echo "üîç Fallback 2: Using pnpm add in tangent-electron directory..."
          cd /repo/Tangent-main/apps/tangent-electron
          pnpm add -D electron@35.2.1 --ignore-scripts=false

          # Check if that worked
          if [[ -f "$EXPECTED" ]]; then
            echo "‚úÖ Fallback 2 successful: Electron installed via pnpm add in tangent-electron directory"
          else
            # Try fallback 3: npm install as last resort
            echo "üîç Fallback 3: Using npm install as last resort..."
            cd /repo
            rm -rf node_modules/electron node_modules/.bin/electron 2>/dev/null || true
            # Clean npm cache to avoid potential issues
            npm cache clean --force
            npm install --no-save electron@35.2.1

            # Show npm debug logs if this fails
            if [[ ! -f "$EXPECTED" ]]; then
              echo "‚ùå All fallback methods failed! Showing npm logs:"
              ls -la /home/pwuser/.npm/_logs/ || true
              cat /home/pwuser/.npm/_logs/*-debug-0.log || echo "npm debug log not found"
              find /repo -name "electron" -type f | head -n 10 || echo "No electron binary found in /repo"
              exit 1
            else
              echo "‚úÖ Fallback 3 successful: Electron installed via npm install"
            fi
          fi
        fi
      fi

      if [[ -f "$EXPECTED" ]]; then
        # Show Electron binary file info
        echo "‚úÖ Electron binary found at $EXPECTED"
        ls -la "$EXPECTED"
        file "$EXPECTED"

        # Ensure executable permissions
        echo "Making Electron binary executable..."
        chmod +x "$EXPECTED"

        # Check if symlink exists or create it
        if [[ ! -L "/repo/node_modules/.bin/electron" ]]; then
          echo "Creating Electron symlink..."
          mkdir -p /repo/node_modules/.bin
          ln -sf ../electron/dist/electron /repo/node_modules/.bin/electron
        else
          echo "Electron symlink already exists"
        fi

        # Create additional guaranteed path
        mkdir -p /repo/bin
        cp "$EXPECTED" /repo/bin/electron
        chmod +x /repo/bin/electron
        echo "‚úÖ Created guaranteed binary at /repo/bin/electron"

        # Try running Electron to verify it works
        echo "Testing Electron binary execution:"
        "$EXPECTED" --version --no-sandbox || echo "Execution failed in headless (expected)"

        # Check library dependencies
        echo "Checking Electron binary dependencies:"
        ldd "$EXPECTED" || echo "ldd check failed"

        # Share path with test scripts
        echo "$EXPECTED" > /tmp/electron-binary-path.txt
        echo "‚úÖ Saved Electron path to /tmp/electron-binary-path.txt"

        # Try to trace what happens when electron runs
        echo "Running strace on Electron for diagnostic purposes:"
        timeout 5 strace -f "$EXPECTED" --version --no-sandbox 2>&1 | head -20 || echo "Strace stopped (expected)"

        echo "==== ELECTRON VALIDATION COMPLETE ===="
      else
        echo "‚ùå CRITICAL ERROR: Electron binary not found even after fallback install"
        echo "Searching for any electron binaries:"
        find /repo -name "electron" -type f | grep -v "node_modules/electron-builder" || true
        exit 1
      fi
EOS

    ###########################################################################
    # 2b ¬∑ Install any missing build-time deps (adm-zip for webpack plugin)
    ###########################################################################
    RUN pnpm --filter ${APP_FILTER} add -D adm-zip@0.5.16

    ################################################################################
    # 3 ¬∑ Link real Electron package from pnpm store
    ################################################################################
    # 3 ¬∑ Ensure Electron is linked in node_modules (idempotent)
    RUN echo "Ensuring Electron is properly linked..." &&\
        if [ ! -d "/repo/node_modules/electron" ]; then\
            echo "Searching for Electron in pnpm store..." &&\
            STORE_PATH=$(find "$(pnpm root)/.pnpm" -type f -path '*/electron@*/node_modules/electron/cli.js' -print -quit | xargs dirname || true) &&\
            if [ -n "$STORE_PATH" ] && [ -f "$STORE_PATH/cli.js" ]; then\
                echo "Found Electron in pnpm store at: $STORE_PATH" &&\
                mkdir -p /repo/node_modules &&\
                ln -sf "$STORE_PATH" /repo/node_modules/electron &&\
                echo "‚úÖ Created symlink to Electron";\
            else\
                echo "No Electron found to link. Will rely on Playwright's built-in Electron.";\
            fi\
        else\
            echo "‚úÖ Electron already available in node_modules";\
        fi &&\
        ls -la /repo/node_modules 2>/dev/null | grep electron || echo "No electron entry in node_modules directory listing"

    ################################################################################
    # 4 ¬∑ Comprehensive Electron self-test using external script files
    # First switch to root user to handle file operations that require elevated privileges
    USER root

    # Copy the test scripts into the container - scripts should already be executable locally
    COPY --chmod=755 scripts/electron-tests /repo/scripts/electron-tests

    # Change ownership of the scripts to pwuser (matching the rest of the repo)
    RUN chown -R pwuser:pwuser /repo/scripts/electron-tests

    # Switch back to pwuser for running the tests
    USER pwuser

    # Start of Electron self-test
    RUN echo "\n\n‚ùî Running comprehensive Electron self-test (using external scripts)...\n\n"

    # Step 1: Test require.resolve('electron')
    RUN echo "1. Testing direct require.resolve('electron')..." &&\
        node /repo/scripts/electron-tests/test-require-resolve.js

    # Step 2: Test require('electron')
    RUN echo "2. Testing require('electron')..." &&\
        node /repo/scripts/electron-tests/test-require.js

    # Step 3: Test binary execution with spawn
    RUN echo "3. Testing binary execution..." &&\
        node /repo/scripts/electron-tests/test-spawn.js

    # Step 4: Check for symlink and test it
    RUN echo "4. Checking CLI symlink..." &&\
        node /repo/scripts/electron-tests/test-symlink.js

    # End of tests
    RUN echo "\n\n‚úÖ Electron diagnostics test suite completed\n\n"

    ################################################################################
    # 5 ¬∑ fallback bundle ‚Äì copy working stubs instead of printf-ing them
    ################################################################################
    # This section already reflects the suggested change from file_context_0.
    # The old printf block is gone, replaced by these cp commands.
    RUN set -e;\
        mkdir -p /repo/Tangent-main/apps/tangent-electron/__build/bundle &&\
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_preload.js\
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/preload.js &&\
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_main.js\
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/main.js &&\
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_renderer.html\
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/renderer.html &&\
        # codex_process_manager is not needed for tests ‚Äì empty placeholder
        echo "module.exports = {};"\
           > /repo/Tangent-main/apps/tangent-electron/__build/bundle/codex_process_manager.js

    ################################################################################
    # 6 ¬∑ Install Playwright browsers and dependencies
    ################################################################################
    # Switch to root user for browser installation which requires sudo privileges
    USER root

    # Ensure sudo is available for Playwright's dependency installation
    RUN apt-get update && apt-get install -y sudo

    RUN echo "Installing Playwright browsers, Electron, and dependencies..." &&\
        npx playwright install --with-deps chromium firefox webkit electron &&\
        echo "Smoke-testing Playwright CLI..." &&\
        npx playwright --version

    # Pre-create the IntegrationTestWorkspace directory with correct permissions and settings
    RUN echo "Ensuring IntegrationTestWorkspace directory exists with proper settings..." &&\
        mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent &&\
        echo '{"enableCodexIntegration":true}' > /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent/settings.json &&\
        chown -R pwuser:pwuser /repo/Tangent-main/apps/IntegrationTestWorkspace &&\
        chmod -R 755 /repo/Tangent-main/apps/IntegrationTestWorkspace &&\
        echo "Contents of settings.json:" &&\
        cat /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent/settings.json &&\
        echo "IntegrationTestWorkspace initialized and ready with Codex integration enabled"

    # Create global settings directory to ensure Codex integration is enabled globally as well
    RUN mkdir -p /home/pwuser/.config/Tangent &&\
        echo '{"enableCodexIntegration":true}' > /home/pwuser/.config/Tangent/test_settings.json &&\
        chown -R pwuser:pwuser /home/pwuser/.config/Tangent &&\
        echo "Global settings directory created with Codex integration enabled"

    # Switch back to pwuser for the rest of the operations
    USER pwuser

    ################################################################################
    # 7 ¬∑ Comprehensive diagnostics and verification for Electron
    ################################################################################
    # Enhanced, comprehensive verification for Electron installation and dependencies
    # Use heredoc for enhanced Electron validation to avoid syntax issues
    RUN bash -euxo pipefail <<'EOS'
      echo "==== ENHANCED ELECTRON VERIFICATION IN DOCKER ===="
      echo "Checking all potential Electron paths and dependencies..."

      echo "1. Checking reserved path /repo/bin/electron (our guaranteed binary):"
      ls -la /repo/bin/electron || echo "Guaranteed path NOT found"
      if [[ -f "/repo/bin/electron" ]]; then
          chmod +x /repo/bin/electron
          echo "Running guaranteed binary version check:"
          /repo/bin/electron --version --no-sandbox || echo "Binary version check FAILED"
          echo "Library dependencies:"
          ldd /repo/bin/electron || echo "ldd check failed"
      fi

      echo "2. Checking standard installation path:"
      ls -la /repo/node_modules/electron/dist/electron || echo "Standard path NOT found"
      if [[ -f "/repo/node_modules/electron/dist/electron" ]]; then
          chmod +x /repo/node_modules/electron/dist/electron
          echo "Running standard binary version check:"
          /repo/node_modules/electron/dist/electron --version --no-sandbox || echo "Binary version check FAILED"
          echo "Library dependencies:"
          ldd /repo/node_modules/electron/dist/electron || echo "ldd check failed"
      fi

      echo "3. Checking symlink in .bin directory:"
      ls -la /repo/node_modules/.bin/electron || echo "Symlink NOT found"
      if [[ -L "/repo/node_modules/.bin/electron" ]]; then
          SYMLINK_TARGET=$(readlink -f /repo/node_modules/.bin/electron)
          echo "Symlink target: $SYMLINK_TARGET"
          if [[ -f "$SYMLINK_TARGET" ]]; then
              echo "Symlink target exists"
              chmod +x "$SYMLINK_TARGET"
              echo "Running symlink target version check:"
              "$SYMLINK_TARGET" --version --no-sandbox || echo "Symlink version check FAILED"
          else
              echo "Symlink target does not exist"
          fi
      fi

      echo "4. Checking require.resolve('electron') result:"
      RESOLVE_PATH=$(node -e "try { console.log(require.resolve('electron')); } catch(e) { console.error('ERROR:', e.message); process.exit(1); }") || echo "require.resolve failed"
      if [[ $? -eq 0 ]]; then
          echo "Resolve path: $RESOLVE_PATH"
          ELECTRON_DIR=$(dirname "$RESOLVE_PATH")
          if [[ "$RESOLVE_PATH" == *"cli.js"* ]]; then
              echo "Checking for binary relative to cli.js..."
              POTENTIAL_BINARY="$ELECTRON_DIR/../dist/electron"
              if [[ -f "$POTENTIAL_BINARY" ]]; then
                  echo "Found binary at $POTENTIAL_BINARY"
                  chmod +x "$POTENTIAL_BINARY"
                  echo "Running potential binary version check:"
                  "$POTENTIAL_BINARY" --version --no-sandbox || echo "Potential binary version check FAILED"
              fi
          fi
      fi

      echo "5. Testing Playwright's electron executablePath:"
      # Note: This will likely fail since _electron.executablePath() doesn't exist in Playwright 1.52
      # Include it but handle the failure gracefully
      PLAYWRIGHT_ELECTRON=$(node -e "try {
        const pw = require('@playwright/test');
        if (typeof pw._electron.executablePath === 'function') {
          console.log(pw._electron.executablePath());
        } else {
          console.error('ERROR: _electron.executablePath() is not a function in this Playwright version');
          process.exit(1);
        }
      } catch(e) {
        console.error('ERROR:', e.message);
        process.exit(1);
      }") || echo "Playwright executablePath is not available"

      if [[ $? -eq 0 && -n "$PLAYWRIGHT_ELECTRON" ]]; then
          echo "Playwright Electron path: $PLAYWRIGHT_ELECTRON"
          if [[ -f "$PLAYWRIGHT_ELECTRON" ]]; then
              echo "Playwright Electron binary exists"
              chmod +x "$PLAYWRIGHT_ELECTRON"
              echo "Running Playwright Electron version check:"
              "$PLAYWRIGHT_ELECTRON" --version --no-sandbox || echo "Playwright Electron version check FAILED"
          else
              echo "Playwright Electron binary does not exist"
          fi
      fi

      echo "6. Checking DISPLAY environment and Xvfb:"
      echo "Current DISPLAY: $DISPLAY"
      echo "Testing Xvfb connection:"
      xdpyinfo || echo "xdpyinfo failed - display server may not be running"

      echo "==== ENHANCED ELECTRON VERIFICATION COMPLETE ===="
EOS

    # Creates /repo/debug.sh for quick environment checks inside the container.
    RUN cat <<'EOS' > /repo/debug.sh
#!/usr/bin/env bash
echo "=============== Enhanced Debug Capsule ==============="
echo "Environment  : Docker container"
echo "Node         : $(node -v)"
echo "Playwright   : $(pnpm dlx playwright@1.52.0 --version 2>/dev/null)"
echo "Architecture : $(uname -m)"
echo ""
echo "===== Electron Binary Locations ====="

# Check /repo/bin/electron (our guaranteed location)
if [ -f "/repo/bin/electron" ]; then
  echo "‚úÖ GUARANTEED: /repo/bin/electron exists"
  ls -la /repo/bin/electron
  file /repo/bin/electron
  echo "  Executable: $([ -x /repo/bin/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå CRITICAL ERROR: /repo/bin/electron NOT FOUND"
fi

# Check standard install location
if [ -f "/repo/node_modules/electron/dist/electron" ]; then
  echo "‚úÖ STANDARD: /repo/node_modules/electron/dist/electron exists"
  ls -la /repo/node_modules/electron/dist/electron
  echo "  Executable: $([ -x /repo/node_modules/electron/dist/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Standard Electron binary not found"
fi

# Check symlink
if [ -L "/repo/node_modules/.bin/electron" ]; then
  echo "‚úÖ SYMLINK: /repo/node_modules/.bin/electron exists"
  ls -la /repo/node_modules/.bin/electron
  target=$(readlink -f /repo/node_modules/.bin/electron)
  echo "  ‚Üí Points to: $target"
  echo "  ‚Üí Target exists: $([ -f "$target" ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Electron symlink not found"
fi

# Check electron-binary-path.txt
if [ -f "/tmp/electron-binary-path.txt" ]; then
  echo "‚úÖ PATH FILE: /tmp/electron-binary-path.txt exists"
  echo "  ‚Üí Content: $(cat /tmp/electron-binary-path.txt)"
  saved_path=$(cat /tmp/electron-binary-path.txt)
  echo "  ‚Üí Path exists: $([ -f "$saved_path" ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: electron-binary-path.txt not found"
fi

echo ""
echo "===== JavaScript Require Resolution ====="
node - <<'NODE'
  try {
    console.log('‚Ä¢ require.resolve(\'electron\'):');
    const r = require.resolve('electron');
    console.log('  ‚Üí Resolves to: ' + r);

    const fs = require('fs');
    console.log('  ‚Üí Path exists: ' + fs.existsSync(r));

    if (fs.existsSync(r)) {
      const stats = fs.statSync(r);
      console.log('  ‚Üí Is executable: ' + !!(stats.mode & 0o111));
      console.log('  ‚Üí File size: ' + stats.size + ' bytes');
    }

    console.log('‚Ä¢ require(\'electron\'):');
    const electronModule = require('electron');
    console.log('  ‚Üí Type: ' + typeof electronModule);
    console.log('  ‚Üí Value: ' + JSON.stringify(electronModule).substring(0, 100) + '...');
  } catch (err) {
    console.error('  ‚Üí ERROR: ' + err.message);
  }

  try {
    console.log('‚Ä¢ playwright._electron.executablePath():');
    const pw = require('@playwright/test');
    const electronPath = pw._electron.executablePath();
    console.log('  ‚Üí Returns: ' + electronPath);

    const fs = require('fs');
    console.log('  ‚Üí Path exists: ' + fs.existsSync(electronPath));

    if (fs.existsSync(electronPath)) {
      const stats = fs.statSync(electronPath);
      console.log('  ‚Üí Is executable: ' + !!(stats.mode & 0o111));
    }
  } catch (err) {
    console.error('  ‚Üí ERROR: ' + err.message);
  }
NODE

# Check if tangent.ts can find Electron
echo ""
echo "===== Testing Electron Binary Detection ====="
cd /repo/Tangent-main/apps/tangent-electron/tests-integration
echo "‚Ä¢ Running getElectronExec() from tangent.ts..."
node -e "
  const fs = require('fs');
  // Mark environment as Docker
  process.env.PLAYWRIGHT_IN_DOCKER = '1';
  // Import the tangent module
  try {
    const tangent = require('./tangent');
    console.log('  ‚Üí tangent.ts loaded successfully');
  } catch (err) {
    console.error('  ‚Üí Error loading tangent.ts:', err.message);
  }
" || echo "  ‚Üí Error executing test script"

echo "============================================="
EOS
    RUN chmod +x /repo/debug.sh

    ################################################################################
    # 8 ¬∑ ENTRYPOINT ‚Äî run the five Codex specs under xvfb
    ################################################################################
    # Use the dedicated script file
    # This avoids Docker parser issues with multiline commands
    # The script is already copied as part of the COPY . . command
    RUN chmod +x /repo/scripts/docker-run-tests.sh

    # Simple CMD that just runs the script from the repository
    CMD ["/repo/scripts/docker-run-tests.sh"]
# Optional cache-buster so this layer rebuilds whenever stub_main.js or the
# repository HEAD changes.  Supply with
#   docker build --build-arg STUB_HASH=$(git rev-parse HEAD) ‚Ä¶
ARG STUB_HASH=dev

# ------------------------------------------------------------------
# 9 ¬∑ FINAL stub copy ‚Äì guarantees the very latest stub_main.js is
#     the file Electron actually loads, regardless of earlier layers.
#     This layer is rebuilt every time stub_main.js changes, even if
#     subsequent layers are cached.
# ------------------------------------------------------------------

COPY Tangent-main/apps/tangent-electron/scripts/stub_main.js\
     Tangent-main/apps/tangent-electron/__build/bundle/main.js

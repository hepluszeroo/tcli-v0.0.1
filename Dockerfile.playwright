# cache-buster: pass git hash so stub layer always rebuilds
ARG STUB_HASH
# ---------------------------------------------------------------------------
# Tangent ‚áÑ Codex end-to-end runner ‚Äî based on Playwright v1.52 "jammy" image
# (works on Apple-Silicon when you build / run with  --platform linux/amd64)
# ---------------------------------------------------------------------------

FROM mcr.microsoft.com/playwright:v1.52.0-jammy

# Use bash for every subsequent RUN instruction (gives us arrays, brace
# expansion, && piping behaviour identical across layers).
SHELL ["/bin/bash", "-c"]

################################################################################
# 0 ¬∑ Base setup - Node 20, system dependencies, environment variables
################################################################################
USER root

# Verify Node.js version and ensure Node 20 is installed
RUN set -euo pipefail &&\
    node --version &&\
    # Install Node 20 explicitly
    curl -fsSL https://deb.nodesource.com/setup_20.x | bash - &&\
    apt-get update -qq &&\
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --allow-downgrades \
        # Node.js
        nodejs \
        # Basic tools
        ca-certificates \
        curl \
        wget \
        gnupg \
        unzip \
        tar \
        gzip \
        git \
        sudo \
        # System diagnostics
        file \
        strace \
        lsof \
        # Basic X11 libraries
        libx11-6 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libxfixes3 \
        libxext6 libxi6 libxtst6 libxcursor1 \
        # GPU and rendering
        libdrm2 libgbm1 libegl1 libgl1 \
        # Audio
        libasound2 libpulse0 \
        # Security and encryption
        libnss3 libnspr4 \
        # GTK and desktop integration
        libgtk-3-0 libcups2 libxcb-shm0 libatk1.0-0 libatk-bridge2.0-0 \
        # Display server
        xvfb dbus-x11 \
        libgconf-2-4 libnotify4 libxss1 &&\
    rm -rf /var/lib/apt/lists/* &&\
    # Ensure corepack is enabled for pnpm
    corepack enable &&\
    # Verify Node and npm versions after installation
    echo "Node: $(node --version), npm: $(npm --version), pnpm: $(pnpm --version)" &&\
    echo "‚úÖ System dependencies and Node.js 20 installed successfully"

# add Playwright's node-modules to PATH so `playwright` is always available
ENV PATH=/ms-playwright/node_modules/.bin:$PATH
ENV CI=true PLAYWRIGHT_IN_DOCKER=1 DISPLAY=:99 \
    XDG_RUNTIME_DIR=/tmp/runtime-dir DBUS_SESSION_BUS_ADDRESS=/dev/null \
    # Debug environment variables for Electron download
    ELECTRON_DEBUG_DOWNLOAD="true" \
    DEBUG="electron-download*,@electron/get*"

################################################################################
# 1 ¬∑ Copy repo & install ALL dependencies including Electron
################################################################################
USER pwuser
WORKDIR /repo
COPY --chown=pwuser:pwuser . .

# Ensure the integration test workspace path exists
RUN mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace

# Configure pnpm for optimal reliability
RUN echo "Setting up .npmrc for better reliability..." &&\
    echo "allowed-scripts=electron" >> .npmrc &&\
    echo "fetch-timeout=300000" >> .npmrc &&\
    echo "fetch-retries=5" >> .npmrc &&\
    echo "network-timeout=300000" >> .npmrc &&\
    echo "strict-peer-dependencies=false" >> .npmrc &&\
    echo "auto-install-peers=true" >> .npmrc &&\
    # Critical: ensure scripts are allowed to run
    echo "ignore-scripts=false" >> .npmrc &&\
    cat .npmrc

################################################################################
# 2 ¬∑ Focused single-step pnpm install with Electron
################################################################################
# Primary installation step - focused on installing ALL dependencies including Electron
# This should be the ONLY place Electron is installed
RUN set -euxo pipefail &&\
    echo "üöÄ Installing ALL project dependencies via pnpm (including Electron)..." &&\
    # Clean pnpm store to avoid cache issues
    pnpm store prune &&\
    # Verify package.json contains electron dependency
    cd /repo &&\
    echo "Checking for electron in package.json files:" &&\
    grep -r "\"electron\"" --include="package.json" . || echo "WARNING: electron not found in package.json!" &&\
    # Verify pnpm version (v10+ blocks scripts by default)
    echo "Using pnpm version: $(pnpm --version)" &&\
    # Install all workspaces' dependencies with maximum verbosity, without ignored scripts!
    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 pnpm -ddd install -r --frozen-lockfile --prod=false --ignore-scripts=false &&\
    echo "‚úÖ Main pnpm install complete."

# Directly execute the first Electron installer we can find in the repo
RUN set -euxo pipefail && \
    echo "üîç Looking for electron/install.js ..." && \
    ELECTRON_INSTALL=$(find /repo -path "*/node_modules/electron/install.js" | head -n 1) && \
    if [ -z "$ELECTRON_INSTALL" ]; then \
       echo "‚ùå   install.js not found anywhere ‚Üí abort" && exit 1 ;\
    fi && \
    echo "‚öôÔ∏è  Running $ELECTRON_INSTALL" && \
    node "$ELECTRON_INSTALL"

# Verify the bundle exists before continuing
RUN test -f $(dirname $(dirname $(find /repo/node_modules -type f -name chrome-sandbox | head -n1)))/electron

# Create the helper path after the guard
RUN set -euxo pipefail && \
    ELECTRON_DIR=$(dirname $(dirname $(find /repo/node_modules -type f -name chrome-sandbox | head -n1))) && \
    echo "Electron dir: $ELECTRON_DIR" && \
    mkdir -p /repo/bin && \
    ln -sf "$ELECTRON_DIR/electron" /repo/bin/electron && \
    chmod +x "$ELECTRON_DIR/electron"

################################################################################
# 3 ¬∑ Detailed Electron verification
################################################################################
# Immediately verify if Electron was installed correctly
RUN set -euxo pipefail &&\
    echo "==== CRITICAL VERIFICATION: Electron after main pnpm install ====" &&\
    EXPECTED_ELECTRON_PATH="/repo/node_modules/electron/dist/electron" &&\
    echo "Expected Electron binary path: ${EXPECTED_ELECTRON_PATH}" &&\
    # Check if Electron directory exists at all
    if [ -d "/repo/node_modules/electron" ]; then \
        echo "‚úì Electron directory exists in node_modules" &&\
        echo "Contents of /repo/node_modules/electron:" &&\
        ls -la /repo/node_modules/electron/ &&\
        echo "Contents of /repo/node_modules/electron/dist (if it exists):" &&\
        ls -la /repo/node_modules/electron/dist/ || echo "dist subdirectory missing!"; \
    else \
        echo "‚ùå ERROR: Electron directory NOT FOUND in node_modules!" &&\
        echo "Contents of /repo/node_modules:" &&\
        ls -la /repo/node_modules/ | grep -i electron || echo "No electron entries found"; \
    fi &&\
    # Now check for the actual binary
    if [ -f "${EXPECTED_ELECTRON_PATH}" ]; then \
        # If binary exists, make it executable and test it
        echo "‚úì Electron binary exists at expected location" &&\
        ls -la "${EXPECTED_ELECTRON_PATH}" &&\
        chmod +x "${EXPECTED_ELECTRON_PATH}" &&\
        echo "Making binary executable..." &&\
        echo "Running ${EXPECTED_ELECTRON_PATH} --version:" &&\
        "${EXPECTED_ELECTRON_PATH}" --version --no-sandbox || echo "Version check failed (expected in headless env)" &&\
        echo "Checking library dependencies:" &&\
        ldd "${EXPECTED_ELECTRON_PATH}" || echo "ldd check failed (expected)" &&\
        echo "‚úÖ ELECTRON VERIFICATION PASSED"; \
    else \
        # If binary doesn't exist, provide detailed diagnostics
        echo "‚ùå CRITICAL ERROR: Electron binary NOT FOUND at ${EXPECTED_ELECTRON_PATH}!" &&\
        echo "Checking package.json for electron dependency:" &&\
        (grep -r "electron" /repo/*/package.json || echo "Electron not found in package.json files") &&\
        echo "Checking .npmrc for any script-related settings:" &&\
        (cat /repo/.npmrc || echo "No .npmrc file found") &&\
        echo "Listing Electron packages in pnpm store:" &&\
        find "$(pnpm store path)" -path "*electron*" -type d | head -n 10 || echo "No Electron found in pnpm store" &&\
        echo "Searching for ANY electron files in the repository:" &&\
        find /repo -name "electron" -type f | head -n 20 &&\
        echo "‚ùå VERIFICATION FAILED: Electron binary missing after main pnpm install"; \
        exit 1; \
    fi &&\
    echo "==== Electron verification complete ===="

################################################################################
# 4 ¬∑ Create symlinks and guaranteed paths for Electron binary
################################################################################
# Set up symlinks and guaranteed paths if Electron binary exists
RUN set -euxo pipefail &&\
    echo "Setting up Electron binary symlinks and guaranteed paths..." &&\
    ELECTRON_DIR=$(dirname $(dirname $(find /repo/node_modules \
               -type f -name chrome-sandbox | head -n1))) && \
    echo "Electron dir: $ELECTRON_DIR" && \
    mkdir -p /repo/bin && \
    ln -sf "$ELECTRON_DIR/electron" /repo/bin/electron && \
    chmod +x "$ELECTRON_DIR/electron" && \
    echo "‚úÖ Electron binary symlinks and guaranteed paths set up successfully"

################################################################################
# 5 ¬∑ Install Playwright browsers and dependencies
################################################################################
USER root

# Install Playwright browsers and dependencies
RUN echo "Installing Playwright browsers and dependencies..." &&\
    # Remove 'electron' from the installation targets as it's not a valid Playwright browser
    npx playwright install --with-deps chromium firefox webkit &&\
    echo "Smoke-testing Playwright CLI..." &&\
    npx playwright --version

################################################################################
# 6 ¬∑ Prepare integration test workspace
################################################################################
# Pre-create the IntegrationTestWorkspace directory with correct settings
RUN echo "Setting up IntegrationTestWorkspace directory..." &&\
    mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent &&\
    echo '{"enableCodexIntegration":true}' > /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent/settings.json &&\
    chown -R pwuser:pwuser /repo/Tangent-main/apps/IntegrationTestWorkspace &&\
    chmod -R 755 /repo/Tangent-main/apps/IntegrationTestWorkspace

# Create global settings directory with Codex integration enabled
RUN mkdir -p /home/pwuser/.config/Tangent &&\
    echo '{"enableCodexIntegration":true}' > /home/pwuser/.config/Tangent/test_settings.json &&\
    chown -R pwuser:pwuser /home/pwuser/.config/Tangent &&\
    echo "Global settings directory created with Codex integration enabled"

################################################################################
# 7 ¬∑ Copy stub files for tests
################################################################################
USER pwuser

# Copy stub files for tests
RUN set -e &&\
    mkdir -p /repo/Tangent-main/apps/tangent-electron/__build/bundle &&\
    cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_preload.js \
       /repo/Tangent-main/apps/tangent-electron/__build/bundle/preload.js &&\
    cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_main.js \
       /repo/Tangent-main/apps/tangent-electron/__build/bundle/main.js &&\
    cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_renderer.html \
       /repo/Tangent-main/apps/tangent-electron/__build/bundle/renderer.html &&\
    # Empty placeholder for codex_process_manager
    echo "module.exports = {};" > \
       /repo/Tangent-main/apps/tangent-electron/__build/bundle/codex_process_manager.js

################################################################################
# 8 ¬∑ Create debug script
################################################################################
# Create a debug script for diagnostics
RUN cat <<'EOS' > /repo/debug.sh && chmod +x /repo/debug.sh
#!/usr/bin/env bash
echo "=============== Environment Diagnostics ==============="
echo "Environment  : Docker container"
echo "Node         : $(node -v)"
echo "npm          : $(npm --version)"
echo "pnpm         : $(pnpm --version)"
echo "Playwright   : $(pnpm dlx playwright@1.52.0 --version 2>/dev/null)"
echo "Architecture : $(uname -m)"
echo ""
echo "===== Electron Binary Locations ====="

# Check /repo/bin/electron (guaranteed location)
if [ -f "/repo/bin/electron" ]; then
  echo "‚úÖ GUARANTEED: /repo/bin/electron exists"
  ls -la /repo/bin/electron
  file /repo/bin/electron
  echo "  Executable: $([ -x /repo/bin/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå CRITICAL ERROR: /repo/bin/electron NOT FOUND"
fi

# Check standard install location
if [ -f "/repo/node_modules/electron/dist/electron" ]; then
  echo "‚úÖ STANDARD: /repo/node_modules/electron/dist/electron exists"
  ls -la /repo/node_modules/electron/dist/electron
  echo "  Executable: $([ -x /repo/node_modules/electron/dist/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Standard Electron binary not found"
fi

# Check symlink
if [ -L "/repo/node_modules/.bin/electron" ]; then
  echo "‚úÖ SYMLINK: /repo/node_modules/.bin/electron exists"
  ls -la /repo/node_modules/.bin/electron
  target=$(readlink -f /repo/node_modules/.bin/electron)
  echo "  ‚Üí Points to: $target"
  echo "  ‚Üí Target exists: $([ -f "$target" ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Electron symlink not found"
fi

echo ""
echo "===== JavaScript Require Resolution ====="
node -e "
try {
  console.log('‚Ä¢ require.resolve(\'electron\'):');
  const r = require.resolve('electron');
  console.log('  ‚Üí Resolves to: ' + r);

  const fs = require('fs');
  console.log('  ‚Üí Path exists: ' + fs.existsSync(r));

  console.log('‚Ä¢ require(\'electron\'):');
  const electron = require('electron');
  console.log('  ‚Üí Type: ' + typeof electron);
  console.log('  ‚Üí Properties: ' + Object.keys(electron).join(', '));
} catch (err) {
  console.error('  ‚Üí ERROR: ' + err.message);
}
"
echo "============================================="
EOS

################################################################################
# 9 ¬∑ Entry point - run the tests
################################################################################
# Copy docker-run-tests.sh if it exists, otherwise create it
COPY --chown=pwuser:pwuser scripts/docker-run-tests.sh /repo/scripts/docker-run-tests.sh
RUN if [ ! -f "/repo/scripts/docker-run-tests.sh" ]; then \
    cat <<'TESTSCRIPT' > /repo/scripts/docker-run-tests.sh && \
    chmod +x /repo/scripts/docker-run-tests.sh; \
    fi
#!/usr/bin/env bash
set -euo pipefail
set -x                          # verbose for CI

# 1. Enter correct working directory
cd /repo/Tangent-main/apps/tangent-electron

# 2. Run diagnostics
/repo/debug.sh

# 3. Start Xvfb display server
echo 'Starting Xvfb display server...'
Xvfb :99 -screen 0 1280x720x24 -ac &
XVFB_PID=$!
echo "Started Xvfb process with PID: $XVFB_PID"
sleep 2

# 4. Verify display server
echo 'Verifying Xvfb is running:'
if DISPLAY=:99 xdpyinfo >/dev/null 2>&1; then
  echo 'Xvfb running properly'
else
  echo 'WARNING: Xvfb may not be running correctly'
fi

# 5. List tests
xvfb-run --server-num=99 --server-args='-screen 0 1280x720x24' \
  pnpm exec playwright test \
    --config=playwright.config.ts --project Tests --grep Codex --list

# 6. Run the suite
DEBUG=pw:api,pw:test,codex,main,mock-codex \
xvfb-run --server-num=99 --server-args='-screen 0 1280x720x24' \
  pnpm exec playwright test \
    --config=playwright.config.ts \
    --project Tests --grep Codex --workers 1 --reporter=list --timeout=60000
TESTSCRIPT

# Make sure the script is executable
RUN chmod +x /repo/scripts/docker-run-tests.sh

# Use the script as the entry point
CMD ["/repo/scripts/docker-run-tests.sh"]

# Optional cache-buster so this layer rebuilds whenever stub_main.js or the
# repository HEAD changes.  Supply with
#   docker build --build-arg STUB_HASH=$(git rev-parse HEAD) ‚Ä¶
ARG STUB_HASH=dev

# ------------------------------------------------------------------
# 10 ¬∑ FINAL stub copy ‚Äì guarantees the very latest stub_main.js is
#     the file Electron actually loads, regardless of earlier layers.
#     This layer is rebuilt every time stub_main.js changes, even if
#     subsequent layers are cached.
# ------------------------------------------------------------------

COPY Tangent-main/apps/tangent-electron/scripts/stub_main.js\
     Tangent-main/apps/tangent-electron/__build/bundle/main.js
# cache-buster: pass git hash so stub layer always rebuilds
ARG STUB_HASH
# ---------------------------------------------------------------------------
# Tangent ⇄ Codex end-to-end runner — based on Playwright v1.52 "jammy" image
# (works on Apple-Silicon when you build / run with  --platform linux/amd64)
# ---------------------------------------------------------------------------

    FROM mcr.microsoft.com/playwright:v1.52.0-jammy

    # Use bash for every subsequent RUN instruction (gives us arrays, brace
    # expansion, && piping behaviour identical across layers).
    SHELL ["/bin/bash", "-c"]

    ################################################################################
    # 0 · Base tweaks — Node 22 → 20, system libs, Corepack, PATH
    ################################################################################
    USER root

    # downgrade Node, add minimal X/Audio libs for headless Electron
    RUN set -euo pipefail && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades \
            nodejs \
            libx11-6 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libxfixes3 \
            libdrm2 libgbm1 libasound2 libnss3 libgtk-3-0 libcups2 libxcb-shm0 \
            xvfb dbus-x11 && \
        rm -rf /var/lib/apt/lists/* && \
        corepack enable

    # add Playwright's node-modules to PATH so `playwright` is always available
    ENV PATH=/ms-playwright/node_modules/.bin:$PATH
    ENV CI=true PLAYWRIGHT_IN_DOCKER=1 DISPLAY=:99 \
        XDG_RUNTIME_DIR=/tmp/runtime-dir DBUS_SESSION_BUS_ADDRESS=/dev/null

    ################################################################################
    # 1 · Copy repo & install **all** work-space deps (dev + prod)
    ################################################################################
    USER pwuser
    WORKDIR /repo
    COPY --chown=pwuser:pwuser . .
    # Ensure the throw-away workspace path exists for integration tests
    RUN mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace

    # Configure pnpm for optimal reliability and install deps in two separate steps
    RUN echo "allowed-scripts=electron" >> .npmrc && \
        echo "Setting up .npmrc for better reliability..." && \
        echo "fetch-timeout=300000" >> .npmrc && \
        echo "fetch-retries=5" >> .npmrc && \
        echo "network-timeout=300000" >> .npmrc && \
        echo "strict-peer-dependencies=false" >> .npmrc && \
        echo "auto-install-peers=true" >> .npmrc

    ARG APP_FILTER="tangent_electron"
    ################################################################
    # 2 · Two-phase installation: core dependencies first, then Electron
    ################################################################
    # Step 1: Install core dependencies (excluding Electron)
    RUN echo "🚀 Installing core dependencies (without Electron)..." && \
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 pnpm install -w --prod=false --frozen-lockfile --prefer-offline && \
        echo "✅ Core dependencies installed successfully"

    # Step 2: Install Electron using multiple approaches for redundancy
    # Switch to root temporarily for any commands that might need privileges
    USER root
    RUN apt-get update && apt-get install -y sudo

    # Switch back to pwuser for package installation
    USER pwuser
    RUN echo "🚀 Installing Electron..." && \
        echo "Method 1: Using pnpm add..." && \
        pnpm add -Dw --workspace-root electron@35.2.1 --ignore-scripts=false && \
        echo "✅ pnpm add succeeded" || \
        (echo "⚠️ pnpm add failed, trying alternate method..." && \
        node -e "try { require('electron/install.js'); console.log('✅ Manual electron install succeeded'); } catch(e) { console.error('❌ Manual install failed:', e); process.exit(1); }") && \
        echo "Verifying electron installation..." && \
        if [ -d "/repo/node_modules/electron" ]; then \
          ls -la /repo/node_modules/electron && \
          ls -la /repo/node_modules/.bin/electron || true && \
          echo "✅ Electron directory exists in node_modules" && \
          chmod +x /repo/node_modules/electron/dist/electron || true && \
          echo "Made electron binary executable"; \
        else \
          echo "❌ ERROR: Electron not found in node_modules" && \
          exit 1; \
        fi

    ###########################################################################
    # 2b · Install any missing build-time deps (adm-zip for webpack plugin)
    ###########################################################################
    RUN pnpm --filter ${APP_FILTER} add -D adm-zip@0.5.16

    ################################################################################
    # 3 · Link real Electron package from pnpm store
    ################################################################################
    # 3 · Ensure Electron is linked in node_modules (idempotent)
    RUN echo "Ensuring Electron is properly linked..." && \
        if [ ! -d "/repo/node_modules/electron" ]; then \
            echo "Searching for Electron in pnpm store..." && \
            STORE_PATH=$(find "$(pnpm root)/.pnpm" -type f -path '*/electron@*/node_modules/electron/cli.js' -print -quit | xargs dirname || true) && \
            if [ -n "$STORE_PATH" ] && [ -f "$STORE_PATH/cli.js" ]; then \
                echo "Found Electron in pnpm store at: $STORE_PATH" && \
                mkdir -p /repo/node_modules && \
                ln -sf "$STORE_PATH" /repo/node_modules/electron && \
                echo "✅ Created symlink to Electron"; \
            else \
                echo "No Electron found to link. Will rely on Playwright's built-in Electron."; \
            fi \
        else \
            echo "✅ Electron already available in node_modules"; \
        fi && \
        ls -la /repo/node_modules 2>/dev/null | grep electron || echo "No electron entry in node_modules directory listing"

    ################################################################################
    # 4 · Comprehensive Electron self-test using external script files
    # First switch to root user to handle file operations that require elevated privileges
    USER root

    # Copy the test scripts into the container - scripts should already be executable locally
    COPY --chmod=755 scripts/electron-tests /repo/scripts/electron-tests

    # Change ownership of the scripts to pwuser (matching the rest of the repo)
    RUN chown -R pwuser:pwuser /repo/scripts/electron-tests

    # Switch back to pwuser for running the tests
    USER pwuser

    # Start of Electron self-test
    RUN echo "\n\n❔ Running comprehensive Electron self-test (using external scripts)...\n\n"

    # Step 1: Test require.resolve('electron')
    RUN echo "1. Testing direct require.resolve('electron')..." && \
        node /repo/scripts/electron-tests/test-require-resolve.js

    # Step 2: Test require('electron')
    RUN echo "2. Testing require('electron')..." && \
        node /repo/scripts/electron-tests/test-require.js

    # Step 3: Test binary execution with spawn
    RUN echo "3. Testing binary execution..." && \
        node /repo/scripts/electron-tests/test-spawn.js

    # Step 4: Check for symlink and test it
    RUN echo "4. Checking CLI symlink..." && \
        node /repo/scripts/electron-tests/test-symlink.js

    # End of tests
    RUN echo "\n\n✅ Electron diagnostics test suite completed\n\n"

    ################################################################################
    # 5 · fallback bundle – copy working stubs instead of printf-ing them
    ################################################################################
    # This section already reflects the suggested change from file_context_0.
    # The old printf block is gone, replaced by these cp commands.
    RUN set -e; \
        mkdir -p /repo/Tangent-main/apps/tangent-electron/__build/bundle && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_preload.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/preload.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_main.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/main.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_renderer.html \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/renderer.html && \
        # codex_process_manager is not needed for tests – empty placeholder
        echo "module.exports = {};" \
           > /repo/Tangent-main/apps/tangent-electron/__build/bundle/codex_process_manager.js

    ################################################################################
    # 6 · Install Playwright browsers and dependencies
    ################################################################################
    # Switch to root user for browser installation which requires sudo privileges
    USER root

    # Ensure sudo is available for Playwright's dependency installation
    RUN apt-get update && apt-get install -y sudo

    RUN echo "Installing Playwright browsers (Chromium, Firefox, WebKit) and dependencies..." && \
        npx playwright install --with-deps chromium firefox webkit && \
        echo "Smoke-testing Playwright CLI..." && \
        npx playwright --version

    # Switch back to pwuser for the rest of the operations
    USER pwuser

    ################################################################################
    # 7 · Tiny debug helper (using multiple echo statements to avoid heredoc issues)
    ################################################################################
    # Creates /repo/debug.sh for quick environment checks inside the container.
    RUN cat <<'EOS' > /repo/debug.sh
#!/usr/bin/env bash
echo "=============== Debug capsule ==============="
echo "Node        : $(node -v)"
echo "Playwright  : $(pnpm dlx playwright@1.52.0 --version 2>/dev/null)"
node - <<'NODE'
  try {
    const r = require.resolve('electron');
    console.log('Electron    : resolves to', r);
  } catch {
    console.error('Electron    : ❌ NOT FOUND');
  }
NODE
echo "============================================"
EOS
    RUN chmod +x /repo/debug.sh

    ################################################################################
    # 8 · ENTRYPOINT — run the five Codex specs under xvfb
    ################################################################################
    # Use `bash -c` so we can chain debug script and test runner in one command.
    CMD ["/bin/bash", "-c", "/repo/debug.sh && cd /repo/Tangent-main/apps/tangent-electron && echo 'Running Playwright with properly quoted glob pattern...' && xvfb-run --server-num=99 --server-args='-screen 0 1280x720x24' PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 DEBUG=pw:browser*,pw:electron* pnpm dlx playwright@1.52.0 test \"tests-integration/codex_*.test.ts\" --reporter=list --timeout=120000 --workers=1 --debug"]
# Optional cache-buster so this layer rebuilds whenever stub_main.js or the
# repository HEAD changes.  Supply with
#   docker build --build-arg STUB_HASH=$(git rev-parse HEAD) …
ARG STUB_HASH=dev

# ------------------------------------------------------------------
# 9 · FINAL stub copy – guarantees the very latest stub_main.js is
#     the file Electron actually loads, regardless of earlier layers.
#     This layer is rebuilt every time stub_main.js changes, even if
#     subsequent layers are cached.
# ------------------------------------------------------------------

COPY Tangent-main/apps/tangent-electron/scripts/stub_main.js \
     Tangent-main/apps/tangent-electron/__build/bundle/main.js

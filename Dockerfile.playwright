# cache-buster: pass git hash so stub layer always rebuilds
ARG STUB_HASH
# ---------------------------------------------------------------------------
# Tangent ‚áÑ Codex end-to-end runner ‚Äî based on Playwright v1.52 "jammy" image
# (works on Apple-Silicon when you build / run with  --platform linux/amd64)
# ---------------------------------------------------------------------------

    FROM mcr.microsoft.com/playwright:v1.52.0-jammy

    # Use bash for every subsequent RUN instruction (gives us arrays, brace
    # expansion, && piping behaviour identical across layers).
    SHELL ["/bin/bash", "-c"]

    ################################################################################
    # 0 ¬∑ Base tweaks ‚Äî Node 22 ‚Üí 20, system libs, Corepack, PATH
    ################################################################################
    USER root

    # downgrade Node, add X/Audio libs for headless Electron with comprehensive dependencies
    RUN set -euo pipefail && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades \
            nodejs \
            # Basic X11 libraries
            libx11-6 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libxfixes3 \
            libxext6 libxi6 libxtst6 libxcursor1 \
            # GPU and rendering
            libdrm2 libgbm1 libegl1 libgl1 \
            # Audio
            libasound2 libpulse0 libsndio7.0 \
            # Security and encryption
            libnss3 libnspr4 \
            # GTK and desktop integration
            libgtk-3-0 libcups2 libxcb-shm0 libatk1.0-0 libatk-bridge2.0-0 \
            # Display server
            xvfb dbus-x11 \
            # Additional dependencies for Electron
            libgconf-2-4 libnotify4 libxtst6 xauth xvfb && \
        rm -rf /var/lib/apt/lists/* && \
        corepack enable && \
        echo "Comprehensive Electron dependencies installed successfully"

    # add Playwright's node-modules to PATH so `playwright` is always available
    ENV PATH=/ms-playwright/node_modules/.bin:$PATH
    ENV CI=true PLAYWRIGHT_IN_DOCKER=1 DISPLAY=:99 \
        XDG_RUNTIME_DIR=/tmp/runtime-dir DBUS_SESSION_BUS_ADDRESS=/dev/null

    ################################################################################
    # 1 ¬∑ Copy repo & install **all** work-space deps (dev + prod)
    ################################################################################
    USER pwuser
    WORKDIR /repo
    COPY --chown=pwuser:pwuser . .
    # Ensure the throw-away workspace path exists for integration tests
    RUN mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace

    # Configure pnpm for optimal reliability and install deps in two separate steps
    RUN echo "allowed-scripts=electron" >> .npmrc && \
        echo "Setting up .npmrc for better reliability..." && \
        echo "fetch-timeout=300000" >> .npmrc && \
        echo "fetch-retries=5" >> .npmrc && \
        echo "network-timeout=300000" >> .npmrc && \
        echo "strict-peer-dependencies=false" >> .npmrc && \
        echo "auto-install-peers=true" >> .npmrc

    ARG APP_FILTER="tangent_electron"
    ################################################################
    # 2 ¬∑ Two-phase installation: core dependencies first, then Electron
    ################################################################
    # Step 1: Install core dependencies (excluding Electron)
    RUN echo "üöÄ Installing core dependencies (without Electron)..." && \
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 pnpm install -w --prod=false --frozen-lockfile --prefer-offline && \
        echo "‚úÖ Core dependencies installed successfully"

    # Step 2: Install Electron using multiple approaches for redundancy
    # Switch to root temporarily for any commands that might need privileges
    USER root
    RUN apt-get update && apt-get install -y sudo

    # Switch back to pwuser for package installation
    USER pwuser
    RUN set -eux && \
        echo "üöÄ Installing Electron directly from npm with comprehensive validation..." && \
        # Remove any existing Electron installation to ensure clean state
        rm -rf /repo/node_modules/electron /repo/node_modules/.bin/electron && \
        # Install Electron directly from npm to guarantee correct structure
        npm install --no-save electron@35.2.1 && \
        # Verify the installation is complete
        echo "‚úÖ Verifying Electron installation..." && \
        # Check if key directories and files exist
        [ -d "/repo/node_modules/electron" ] && \
        [ -d "/repo/node_modules/electron/dist" ] && \
        [ -f "/repo/node_modules/electron/dist/electron" ] && \
        # Print key files for diagnostics
        echo "üìÇ Electron installation structure:" && \
        ls -la /repo/node_modules/electron && \
        ls -la /repo/node_modules/electron/dist && \
        # Make the binary executable (critical step)
        chmod +x /repo/node_modules/electron/dist/electron && \
        # Create symbolic link for convenience if it doesn't exist
        if [ ! -L "/repo/node_modules/.bin/electron" ]; then \
            mkdir -p /repo/node_modules/.bin && \
            ln -s ../electron/dist/electron /repo/node_modules/.bin/electron; \
        fi && \
        # Create a file to share Electron's path with tangent.ts
        echo "/repo/node_modules/electron/dist/electron" > /tmp/electron-binary-path.txt && \
        # Test the executable (might fail but that's ok)
        echo "üß™ Testing Electron binary execution:" && \
        /repo/node_modules/electron/dist/electron --version --no-sandbox || echo "Execution in headless environment failed (expected) but binary exists" && \
        # Additional failsafe: copy the binary to a guaranteed location
        mkdir -p /repo/bin && \
        cp /repo/node_modules/electron/dist/electron /repo/bin/electron && \
        chmod +x /repo/bin/electron && \
        echo "‚úÖ Electron binary also available at /repo/bin/electron" && \
        # Verify the binary is 64-bit (which is required in Docker)
        file /repo/node_modules/electron/dist/electron | grep '64-bit' || echo "Warning: not a 64-bit binary" && \
        # Final verification step
        echo "‚úÖ Electron installation complete and verified"

    ###########################################################################
    # 2b ¬∑ Install any missing build-time deps (adm-zip for webpack plugin)
    ###########################################################################
    RUN pnpm --filter ${APP_FILTER} add -D adm-zip@0.5.16

    ################################################################################
    # 3 ¬∑ Link real Electron package from pnpm store
    ################################################################################
    # 3 ¬∑ Ensure Electron is linked in node_modules (idempotent)
    RUN echo "Ensuring Electron is properly linked..." && \
        if [ ! -d "/repo/node_modules/electron" ]; then \
            echo "Searching for Electron in pnpm store..." && \
            STORE_PATH=$(find "$(pnpm root)/.pnpm" -type f -path '*/electron@*/node_modules/electron/cli.js' -print -quit | xargs dirname || true) && \
            if [ -n "$STORE_PATH" ] && [ -f "$STORE_PATH/cli.js" ]; then \
                echo "Found Electron in pnpm store at: $STORE_PATH" && \
                mkdir -p /repo/node_modules && \
                ln -sf "$STORE_PATH" /repo/node_modules/electron && \
                echo "‚úÖ Created symlink to Electron"; \
            else \
                echo "No Electron found to link. Will rely on Playwright's built-in Electron."; \
            fi \
        else \
            echo "‚úÖ Electron already available in node_modules"; \
        fi && \
        ls -la /repo/node_modules 2>/dev/null | grep electron || echo "No electron entry in node_modules directory listing"

    ################################################################################
    # 4 ¬∑ Comprehensive Electron self-test using external script files
    # First switch to root user to handle file operations that require elevated privileges
    USER root

    # Copy the test scripts into the container - scripts should already be executable locally
    COPY --chmod=755 scripts/electron-tests /repo/scripts/electron-tests

    # Change ownership of the scripts to pwuser (matching the rest of the repo)
    RUN chown -R pwuser:pwuser /repo/scripts/electron-tests

    # Switch back to pwuser for running the tests
    USER pwuser

    # Start of Electron self-test
    RUN echo "\n\n‚ùî Running comprehensive Electron self-test (using external scripts)...\n\n"

    # Step 1: Test require.resolve('electron')
    RUN echo "1. Testing direct require.resolve('electron')..." && \
        node /repo/scripts/electron-tests/test-require-resolve.js

    # Step 2: Test require('electron')
    RUN echo "2. Testing require('electron')..." && \
        node /repo/scripts/electron-tests/test-require.js

    # Step 3: Test binary execution with spawn
    RUN echo "3. Testing binary execution..." && \
        node /repo/scripts/electron-tests/test-spawn.js

    # Step 4: Check for symlink and test it
    RUN echo "4. Checking CLI symlink..." && \
        node /repo/scripts/electron-tests/test-symlink.js

    # End of tests
    RUN echo "\n\n‚úÖ Electron diagnostics test suite completed\n\n"

    ################################################################################
    # 5 ¬∑ fallback bundle ‚Äì copy working stubs instead of printf-ing them
    ################################################################################
    # This section already reflects the suggested change from file_context_0.
    # The old printf block is gone, replaced by these cp commands.
    RUN set -e; \
        mkdir -p /repo/Tangent-main/apps/tangent-electron/__build/bundle && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_preload.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/preload.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_main.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/main.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_renderer.html \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/renderer.html && \
        # codex_process_manager is not needed for tests ‚Äì empty placeholder
        echo "module.exports = {};" \
           > /repo/Tangent-main/apps/tangent-electron/__build/bundle/codex_process_manager.js

    ################################################################################
    # 6 ¬∑ Install Playwright browsers and dependencies
    ################################################################################
    # Switch to root user for browser installation which requires sudo privileges
    USER root

    # Ensure sudo is available for Playwright's dependency installation
    RUN apt-get update && apt-get install -y sudo

    RUN echo "Installing Playwright browsers (Chromium, Firefox, WebKit) and dependencies..." && \
        npx playwright install --with-deps chromium firefox webkit && \
        echo "Smoke-testing Playwright CLI..." && \
        npx playwright --version

    # Pre-create the IntegrationTestWorkspace directory with correct permissions and settings
    RUN echo "Ensuring IntegrationTestWorkspace directory exists with proper settings..." && \
        mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent && \
        echo '{"enableCodexIntegration":true}' > /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent/settings.json && \
        chown -R pwuser:pwuser /repo/Tangent-main/apps/IntegrationTestWorkspace && \
        chmod -R 755 /repo/Tangent-main/apps/IntegrationTestWorkspace && \
        echo "Contents of settings.json:" && \
        cat /repo/Tangent-main/apps/IntegrationTestWorkspace/.tangent/settings.json && \
        echo "IntegrationTestWorkspace initialized and ready with Codex integration enabled"

    # Create global settings directory to ensure Codex integration is enabled globally as well
    RUN mkdir -p /home/pwuser/.config/Tangent && \
        echo '{"enableCodexIntegration":true}' > /home/pwuser/.config/Tangent/test_settings.json && \
        chown -R pwuser:pwuser /home/pwuser/.config/Tangent && \
        echo "Global settings directory created with Codex integration enabled"

    # Switch back to pwuser for the rest of the operations
    USER pwuser

    ################################################################################
    # 7 ¬∑ Comprehensive diagnostics and verification for Electron
    ################################################################################
    # Enhanced, comprehensive verification for Electron installation and dependencies
    RUN echo "==== ENHANCED ELECTRON VERIFICATION IN DOCKER ====" && \
        echo "Checking all potential Electron paths and dependencies..." && \
        echo "1. Checking reserved path /repo/bin/electron (our guaranteed binary):" && \
        ls -la /repo/bin/electron || echo "Guaranteed path NOT found" && \
        if [ -f "/repo/bin/electron" ]; then \
            chmod +x /repo/bin/electron && \
            echo "Running guaranteed binary version check:" && \
            (/repo/bin/electron --version --no-sandbox || echo "Binary version check FAILED") && \
            echo "Library dependencies:" && \
            (ldd /repo/bin/electron || echo "ldd check failed"); \
        fi && \
        echo "2. Checking standard installation path:" && \
        ls -la /repo/node_modules/electron/dist/electron || echo "Standard path NOT found" && \
        if [ -f "/repo/node_modules/electron/dist/electron" ]; then \
            chmod +x /repo/node_modules/electron/dist/electron && \
            echo "Running standard binary version check:" && \
            (/repo/node_modules/electron/dist/electron --version --no-sandbox || echo "Binary version check FAILED") && \
            echo "Library dependencies:" && \
            (ldd /repo/node_modules/electron/dist/electron || echo "ldd check failed"); \
        fi && \
        echo "3. Checking symlink in .bin directory:" && \
        ls -la /repo/node_modules/.bin/electron || echo "Symlink NOT found" && \
        if [ -L "/repo/node_modules/.bin/electron" ]; then \
            SYMLINK_TARGET=$(readlink -f /repo/node_modules/.bin/electron) && \
            echo "Symlink target: $SYMLINK_TARGET" && \
            if [ -f "$SYMLINK_TARGET" ]; then \
                echo "Symlink target exists" && \
                chmod +x "$SYMLINK_TARGET" && \
                echo "Running symlink target version check:" && \
                ($SYMLINK_TARGET --version --no-sandbox || echo "Symlink version check FAILED"); \
            else \
                echo "Symlink target does not exist"; \
            fi; \
        fi && \
        echo "4. Checking require.resolve('electron') result:" && \
        RESOLVE_PATH=$(node -e "try { console.log(require.resolve('electron')); } catch(e) { console.error('ERROR:', e.message); process.exit(1); }") || echo "require.resolve failed" && \
        if [ $? -eq 0 ]; then \
            echo "Resolve path: $RESOLVE_PATH" && \
            ELECTRON_DIR=$(dirname "$RESOLVE_PATH") && \
            if [[ "$RESOLVE_PATH" == *"cli.js"* ]]; then \
                echo "Checking for binary relative to cli.js..." && \
                POTENTIAL_BINARY="$ELECTRON_DIR/../dist/electron" && \
                if [ -f "$POTENTIAL_BINARY" ]; then \
                    echo "Found binary at $POTENTIAL_BINARY" && \
                    chmod +x "$POTENTIAL_BINARY" && \
                    echo "Running potential binary version check:" && \
                    ($POTENTIAL_BINARY --version --no-sandbox || echo "Potential binary version check FAILED"); \
                fi; \
            fi; \
        fi && \
        echo "5. Testing Playwright's electron executablePath:" && \
        PLAYWRIGHT_ELECTRON=$(node -e "try { console.log(require('@playwright/test')._electron.executablePath()); } catch(e) { console.error('ERROR:', e.message); process.exit(1); }") || echo "Playwright executablePath failed" && \
        if [ $? -eq 0 ]; then \
            echo "Playwright Electron path: $PLAYWRIGHT_ELECTRON" && \
            if [ -f "$PLAYWRIGHT_ELECTRON" ]; then \
                echo "Playwright Electron binary exists" && \
                chmod +x "$PLAYWRIGHT_ELECTRON" && \
                echo "Running Playwright Electron version check:" && \
                ("$PLAYWRIGHT_ELECTRON" --version --no-sandbox || echo "Playwright Electron version check FAILED"); \
            else \
                echo "Playwright Electron binary does not exist"; \
            fi; \
        fi && \
        echo "6. Checking DISPLAY environment and Xvfb:" && \
        echo "Current DISPLAY: $DISPLAY" && \
        echo "Testing Xvfb connection:" && \
        (xdpyinfo || echo "xdpyinfo failed - display server may not be running") && \
        echo "==== ENHANCED ELECTRON VERIFICATION COMPLETE ===="

    # Creates /repo/debug.sh for quick environment checks inside the container.
    RUN cat <<'EOS' > /repo/debug.sh
#!/usr/bin/env bash
echo "=============== Enhanced Debug Capsule ==============="
echo "Environment  : Docker container"
echo "Node         : $(node -v)"
echo "Playwright   : $(pnpm dlx playwright@1.52.0 --version 2>/dev/null)"
echo "Architecture : $(uname -m)"
echo ""
echo "===== Electron Binary Locations ====="

# Check /repo/bin/electron (our guaranteed location)
if [ -f "/repo/bin/electron" ]; then
  echo "‚úÖ GUARANTEED: /repo/bin/electron exists"
  ls -la /repo/bin/electron
  file /repo/bin/electron
  echo "  Executable: $([ -x /repo/bin/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå CRITICAL ERROR: /repo/bin/electron NOT FOUND"
fi

# Check standard install location
if [ -f "/repo/node_modules/electron/dist/electron" ]; then
  echo "‚úÖ STANDARD: /repo/node_modules/electron/dist/electron exists"
  ls -la /repo/node_modules/electron/dist/electron
  echo "  Executable: $([ -x /repo/node_modules/electron/dist/electron ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Standard Electron binary not found"
fi

# Check symlink
if [ -L "/repo/node_modules/.bin/electron" ]; then
  echo "‚úÖ SYMLINK: /repo/node_modules/.bin/electron exists"
  ls -la /repo/node_modules/.bin/electron
  target=$(readlink -f /repo/node_modules/.bin/electron)
  echo "  ‚Üí Points to: $target"
  echo "  ‚Üí Target exists: $([ -f "$target" ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: Electron symlink not found"
fi

# Check electron-binary-path.txt
if [ -f "/tmp/electron-binary-path.txt" ]; then
  echo "‚úÖ PATH FILE: /tmp/electron-binary-path.txt exists"
  echo "  ‚Üí Content: $(cat /tmp/electron-binary-path.txt)"
  saved_path=$(cat /tmp/electron-binary-path.txt)
  echo "  ‚Üí Path exists: $([ -f "$saved_path" ] && echo 'Yes' || echo 'No')"
else
  echo "‚ùå ERROR: electron-binary-path.txt not found"
fi

echo ""
echo "===== JavaScript Require Resolution ====="
node - <<'NODE'
  try {
    console.log('‚Ä¢ require.resolve(\'electron\'):');
    const r = require.resolve('electron');
    console.log('  ‚Üí Resolves to: ' + r);

    const fs = require('fs');
    console.log('  ‚Üí Path exists: ' + fs.existsSync(r));

    if (fs.existsSync(r)) {
      const stats = fs.statSync(r);
      console.log('  ‚Üí Is executable: ' + !!(stats.mode & 0o111));
      console.log('  ‚Üí File size: ' + stats.size + ' bytes');
    }

    console.log('‚Ä¢ require(\'electron\'):');
    const electronModule = require('electron');
    console.log('  ‚Üí Type: ' + typeof electronModule);
    console.log('  ‚Üí Value: ' + JSON.stringify(electronModule).substring(0, 100) + '...');
  } catch (err) {
    console.error('  ‚Üí ERROR: ' + err.message);
  }

  try {
    console.log('‚Ä¢ playwright._electron.executablePath():');
    const pw = require('@playwright/test');
    const electronPath = pw._electron.executablePath();
    console.log('  ‚Üí Returns: ' + electronPath);

    const fs = require('fs');
    console.log('  ‚Üí Path exists: ' + fs.existsSync(electronPath));

    if (fs.existsSync(electronPath)) {
      const stats = fs.statSync(electronPath);
      console.log('  ‚Üí Is executable: ' + !!(stats.mode & 0o111));
    }
  } catch (err) {
    console.error('  ‚Üí ERROR: ' + err.message);
  }
NODE

# Check if tangent.ts can find Electron
echo ""
echo "===== Testing Electron Binary Detection ====="
cd /repo/Tangent-main/apps/tangent-electron/tests-integration
echo "‚Ä¢ Running getElectronExec() from tangent.ts..."
node -e "
  const fs = require('fs');
  // Mark environment as Docker
  process.env.PLAYWRIGHT_IN_DOCKER = '1';
  // Import the tangent module
  try {
    const tangent = require('./tangent');
    console.log('  ‚Üí tangent.ts loaded successfully');
  } catch (err) {
    console.error('  ‚Üí Error loading tangent.ts:', err.message);
  }
" || echo "  ‚Üí Error executing test script"

echo "============================================="
EOS
    RUN chmod +x /repo/debug.sh

    ################################################################################
    # 8 ¬∑ ENTRYPOINT ‚Äî run the five Codex specs under xvfb
    ################################################################################
    # Enhanced command with robustness features
    CMD ["/bin/bash", "-c", "echo '===== STARTING TEST EXECUTION =====' && \
        # Run diagnostic script for baseline info
        /repo/debug.sh && \
        # Ensure clean environment (kill any stray processes)
        echo 'Cleaning up any previously running Electron processes...' && \
        killall -9 electron || echo 'No Electron processes to kill' && \
        killall -9 Xvfb || echo 'No Xvfb processes to kill' && \
        # Make sure key directories and files exist with proper permissions
        echo 'Ensuring binary permissions...' && \
        chmod +x /repo/bin/electron && \
        chmod +x /repo/node_modules/electron/dist/electron || echo 'Standard path not found' && \
        # Start Xvfb explicitly and verify it's running before tests
        echo 'Starting Xvfb display server...' && \
        Xvfb :99 -screen 0 1280x720x24 -ac & \
        # Wait for Xvfb to initialize fully
        echo 'Waiting for Xvfb to initialize...' && \
        sleep 2 && \
        # Verify display server is running
        echo 'Verifying Xvfb is running:' && \
        (DISPLAY=:99 xdpyinfo >/dev/null 2>&1 && echo 'Xvfb running properly' || echo 'WARNING: Xvfb may not be running correctly') && \
        # Run the tests with enhanced environment variables
        cd /repo/Tangent-main/apps/tangent-electron && \
        echo 'Running Playwright tests with enhanced environment...' && \
        DISPLAY=:99 \
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 \
        ELECTRON_DISABLE_SANDBOX=1 \
        ELECTRON_ENABLE_LOGGING=1 \
        DUMP_HANDLES=1 \
        NODE_OPTIONS='--max-old-space-size=4096' \
        DEBUG=pw:browser*,pw:electron*,electron:*,workspace:*,tangent:*,codex:* \
        pnpm dlx playwright@1.52.0 test \
        \"tests-integration/codex_*.test.ts\" \
        --reporter=list,html \
        --timeout=120000 \
        --workers=1 \
        --retries=1 \
        --debug"]
# Optional cache-buster so this layer rebuilds whenever stub_main.js or the
# repository HEAD changes.  Supply with
#   docker build --build-arg STUB_HASH=$(git rev-parse HEAD) ‚Ä¶
ARG STUB_HASH=dev

# ------------------------------------------------------------------
# 9 ¬∑ FINAL stub copy ‚Äì guarantees the very latest stub_main.js is
#     the file Electron actually loads, regardless of earlier layers.
#     This layer is rebuilt every time stub_main.js changes, even if
#     subsequent layers are cached.
# ------------------------------------------------------------------

COPY Tangent-main/apps/tangent-electron/scripts/stub_main.js \
     Tangent-main/apps/tangent-electron/__build/bundle/main.js

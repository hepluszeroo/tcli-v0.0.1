# cache-buster: pass git hash so stub layer always rebuilds
ARG STUB_HASH
# ---------------------------------------------------------------------------
# Tangent ⇄ Codex end-to-end runner — based on Playwright v1.52 "jammy" image
# (works on Apple-Silicon when you build / run with  --platform linux/amd64)
# ---------------------------------------------------------------------------

    FROM mcr.microsoft.com/playwright:v1.52.0-jammy

    # Use bash for every subsequent RUN instruction (gives us arrays, brace
    # expansion, && piping behaviour identical across layers).
    SHELL ["/bin/bash", "-c"]

    ################################################################################
    # 0 · Base tweaks — Node 22 → 20, system libs, Corepack, PATH
    ################################################################################
    USER root

    # downgrade Node, add minimal X/Audio libs for headless Electron
    RUN set -euo pipefail && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && \
        apt-get update -qq && \
        DEBIAN_FRONTEND=noninteractive apt-get install -y --allow-downgrades \
            nodejs \
            libx11-6 libxkbcommon0 libxcomposite1 libxdamage1 libxrandr2 libxfixes3 \
            libdrm2 libgbm1 libasound2 libnss3 libgtk-3-0 libcups2 libxcb-shm0 \
            xvfb dbus-x11 && \
        rm -rf /var/lib/apt/lists/* && \
        corepack enable

    # add Playwright's node-modules to PATH so `playwright` is always available
    ENV PATH=/ms-playwright/node_modules/.bin:$PATH
    ENV CI=true PLAYWRIGHT_IN_DOCKER=1 DISPLAY=:99 \
        XDG_RUNTIME_DIR=/tmp/runtime-dir DBUS_SESSION_BUS_ADDRESS=/dev/null

    ################################################################################
    # 1 · Copy repo & install **all** work-space deps (dev + prod)
    ################################################################################
    USER pwuser
    WORKDIR /repo
    COPY --chown=pwuser:pwuser . .
    # Ensure the throw-away workspace path exists for integration tests
    RUN mkdir -p /repo/Tangent-main/apps/IntegrationTestWorkspace

    # allow Electron post-install & install monorepo
    RUN echo "allowed-scripts=electron" >> .npmrc && \
        pnpm install -w --prod=false --frozen-lockfile --ignore-scripts=false && \
        pnpm store prune

    ARG APP_FILTER="tangent_electron"
    ################################################################
    # 2 · Electron post-install (download the binary)
    ################################################################
    # Ensure Electron package binary is present (install + rebuild fallback)
    RUN pnpm --filter ${APP_FILTER} rebuild electron || true && \
        # If cli.js is still missing after rebuild, install electron directly
        if ! find "$(pnpm root)/.pnpm" -maxdepth 3 -type f -path '*/electron@*/node_modules/electron/cli.js' | grep -q cli.js; then \
          echo 'Electron binary still missing – performing direct install'; \
          pnpm add -Dw --workspace-root electron@35.2.1 --ignore-scripts=false; \
        fi

    ###########################################################################
    # 2b · Install any missing build-time deps (adm-zip for webpack plugin)
    ###########################################################################
    RUN pnpm --filter ${APP_FILTER} add -D adm-zip@0.5.16

    ################################################################################
    # 3 · Link real Electron package from pnpm store
    ################################################################################
RUN set -eux; \
        # Ensure the Electron binary is downloaded (run install.js explicitly)
        pnpm --filter ${APP_FILTER} exec node node_modules/electron/install.js || true; \
        echo '--- listing electron folders in store ----------------'; \
        find "$(pnpm root)/.pnpm" -maxdepth 3 -type d -name 'electron@*' | head || true; \
        echo '------------------------------------------------------'; \
        STORE_PATH=$(find "$(pnpm root)/.pnpm" -type f -path '*/electron@*/node_modules/electron/cli.js' -print -quit | xargs dirname || true); \
        echo "Electron store path: $STORE_PATH"; \
        [ -n "$STORE_PATH" ] && [ -f "$STORE_PATH/cli.js" ] || { echo 'electron cli.js missing'; exit 1; }; \
        mkdir -p /repo/node_modules; \
        ln -sf "$STORE_PATH" /repo/node_modules/electron; \
        ls -l /repo/node_modules/electron

    ################################################################################
    # 4 · Electron self-test (plain Node require)
    ################################################################################
    RUN node -e "const bin=require('electron'); const {spawnSync}=require('child_process'); const r=spawnSync(bin,['--version','--no-sandbox']); if(r.status!==0){console.error(r.stderr.toString());process.exit(1);} console.log('✔',r.stdout.toString().trim());"

    ################################################################################
    # 5 · fallback bundle – copy working stubs instead of printf-ing them
    ################################################################################
    # This section already reflects the suggested change from file_context_0.
    # The old printf block is gone, replaced by these cp commands.
    RUN set -e; \
        mkdir -p /repo/Tangent-main/apps/tangent-electron/__build/bundle && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_preload.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/preload.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_main.js \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/main.js && \
        cp /repo/Tangent-main/apps/tangent-electron/scripts/stub_renderer.html \
           /repo/Tangent-main/apps/tangent-electron/__build/bundle/renderer.html && \
        # codex_process_manager is not needed for tests – empty placeholder
        echo "module.exports = {};" \
           > /repo/Tangent-main/apps/tangent-electron/__build/bundle/codex_process_manager.js

    ################################################################################
    # 6 · Smoke-test Playwright CLI (via pnpm dlx ensures availability)
    ################################################################################
    RUN pnpm dlx playwright@1.52.0 --version

    ################################################################################
    # 7 · Tiny debug helper (using multiple echo statements to avoid heredoc issues)
    ################################################################################
    # Creates /repo/debug.sh for quick environment checks inside the container.
    RUN cat <<'EOS' > /repo/debug.sh
#!/usr/bin/env bash
echo "=============== Debug capsule ==============="
echo "Node        : $(node -v)"
echo "Playwright  : $(pnpm dlx playwright@1.52.0 --version 2>/dev/null)"
node - <<'NODE'
  try {
    const r = require.resolve('electron');
    console.log('Electron    : resolves to', r);
  } catch {
    console.error('Electron    : ❌ NOT FOUND');
  }
NODE
echo "============================================"
EOS
    RUN chmod +x /repo/debug.sh

    ################################################################################
    # 8 · ENTRYPOINT — run the five Codex specs under xvfb
    ################################################################################
    # Use `bash -c` so we can chain debug script and test runner in one command.
    CMD ["/bin/bash", "-c", "/repo/debug.sh && cd /repo/Tangent-main/apps/tangent-electron && xvfb-run --server-num=99 --server-args='-screen 0 1280x720x24' pnpm dlx playwright@1.52.0 test 'tests-integration/codex_*' --reporter=line --timeout=90000 --workers=1 --debug"]
# Optional cache-buster so this layer rebuilds whenever stub_main.js or the
# repository HEAD changes.  Supply with
#   docker build --build-arg STUB_HASH=$(git rev-parse HEAD) …
ARG STUB_HASH=dev

# ------------------------------------------------------------------
# 9 · FINAL stub copy – guarantees the very latest stub_main.js is
#     the file Electron actually loads, regardless of earlier layers.
#     This layer is rebuilt every time stub_main.js changes, even if
#     subsequent layers are cached.
# ------------------------------------------------------------------

COPY Tangent-main/apps/tangent-electron/scripts/stub_main.js \
     Tangent-main/apps/tangent-electron/__build/bundle/main.js

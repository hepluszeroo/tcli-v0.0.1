# SKB Service Configuration

# Environment (development, test, production)
NODE_ENV=development

# Log level (debug, info, warn, error)
LOG_LEVEL=debug

# Broker configuration
BROKER_URL=nats://localhost:4222
BROKER_TIMEOUT=5000
BROKER_RECONNECT_ATTEMPTS=10
BROKER_RECONNECT_TIME_WAIT=1000

# Topic names
TOPIC_IN_NEW_NOTE=events.tangent.notes.new.v1
TOPIC_OUT_NOTE_INDEXED=events.skb.indexing.status.v1
TOPIC_OUT_NOTE_FRAGMENTED=events.skb.note.fragmented.v1
TOPIC_OUT_GRAPH_UPDATED=events.skb.graph.updated.v1

# HTTP Server (for healthcheck)
HTTP_PORT=3000
HTTP_HOST=0.0.0.0

# File Paths
FRAGMENT_DIR=/data/skb/graph_fragments
GLOBAL_GRAPH_PATH=/data/skb/global_graph.json
ALIAS_MAP_PATH=/data/skb/alias_map.yml

# Graph Configuration
COMPACT_THRESHOLD=500  # Compact after this many merges
COMPACT_MB_LIMIT=20    # Compact when file size reaches this MB
MAX_GRAPH_MB=100       # Critical status when file exceeds this MB
FSYNC=false            # Set to true for durability at performance cost

# KGGen Configuration
OPENAI_API_KEY=sk-your-openai-key-here
# Execution mode: real | module | mock (mock ONLY for tests, ALWAYS use real in production)
KGGEN_MODE=real
# Model to use for generation (default: openai/gpt-4)
KGGEN_MODEL=openai/gpt-4
# Optional: absolute path to kg_gen executable if not on PATH
# KGGEN_BIN=/usr/local/bin/kg_gen
# Optional: Path to kg_gen script if not using default
# KGGEN_SCRIPT=/path/to/kg_gen_cli.py
# Timeout in milliseconds before aborting KGGen process (default: 120000)
KGGEN_TIMEOUT=120000